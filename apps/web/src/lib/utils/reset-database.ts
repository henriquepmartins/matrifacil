import { db } from "../db";

/**
 * Reseta completamente o banco de dados local IndexedDB
 * Remove TODOS os dados e permite come√ßar do zero
 */
export async function resetDatabase() {
  const confirmation = confirm(
    "‚ö†Ô∏è ATEN√á√ÉO: Isso ir√° APAGAR TODOS OS DADOS LOCAIS!\n\n" +
    "Isso inclui:\n" +
    "- Todas as pr√©-matr√≠culas locais\n" +
    "- Todos os alunos locais\n" +
    "- Todos os respons√°veis locais\n" +
    "- Todas as matr√≠culas locais\n" +
    "- Documentos e pend√™ncias\n" +
    "- Fila de sincroniza√ß√£o\n\n" +
    "‚ö†Ô∏è Dados j√° sincronizados com o servidor N√ÉO ser√£o afetados.\n" +
    "‚ö†Ô∏è Dados locais que ainda n√£o foram sincronizados SER√ÉO PERDIDOS.\n\n" +
    "Tem certeza que deseja continuar?"
  );

  if (!confirmation) {
    console.log("‚ùå Opera√ß√£o cancelada pelo usu√°rio");
    return false;
  }

  try {
    console.log("üóëÔ∏è Iniciando reset completo do banco de dados...");
    console.log("=====================================\n");

    // 1. Contar registros antes de apagar
    const counts = {
      responsaveis: await db.responsaveis.count(),
      alunos: await db.alunos.count(),
      matriculas: await db.matriculas.count(),
      turmas: await db.turmas.count(),
      documentos: await db.documentos.count(),
      pendencias: await db.pendencias.count(),
      syncQueue: await db.syncQueue.count(),
      syncMetadata: await db.syncMetadata.count(),
    };

    console.log("üìä Registros encontrados:");
    Object.entries(counts).forEach(([table, count]) => {
      if (count > 0) {
        console.log(`   ${table}: ${count} registros`);
      }
    });
    console.log("");

    // 2. Limpar todas as tabelas
    console.log("üßπ Limpando tabelas...");
    
    await db.syncQueue.clear();
    console.log("   ‚úÖ syncQueue limpa");
    
    await db.syncMetadata.clear();
    console.log("   ‚úÖ syncMetadata limpa");
    
    await db.pendencias.clear();
    console.log("   ‚úÖ pendencias limpa");
    
    await db.documentos.clear();
    console.log("   ‚úÖ documentos limpa");
    
    await db.matriculas.clear();
    console.log("   ‚úÖ matriculas limpa");
    
    await db.alunos.clear();
    console.log("   ‚úÖ alunos limpa");
    
    await db.responsaveis.clear();
    console.log("   ‚úÖ responsaveis limpa");
    
    await db.turmas.clear();
    console.log("   ‚úÖ turmas limpa");

    // 3. Verificar se tudo foi apagado
    console.log("\nüìä Verificando limpeza...");
    const finalCounts = {
      responsaveis: await db.responsaveis.count(),
      alunos: await db.alunos.count(),
      matriculas: await db.matriculas.count(),
      turmas: await db.turmas.count(),
      documentos: await db.documentos.count(),
      pendencias: await db.pendencias.count(),
      syncQueue: await db.syncQueue.count(),
      syncMetadata: await db.syncMetadata.count(),
    };

    const allZero = Object.values(finalCounts).every(count => count === 0);

    if (allZero) {
      console.log("   ‚úÖ Todas as tabelas est√£o vazias");
    } else {
      console.warn("   ‚ö†Ô∏è Algumas tabelas ainda t√™m dados:", finalCounts);
    }

    // 4. Calcular totais removidos
    const totalRemoved = Object.values(counts).reduce((sum, count) => sum + count, 0);

    console.log("\n‚úÖ RESET CONCLU√çDO COM SUCESSO!");
    console.log("=====================================");
    console.log(`üìä Total de registros removidos: ${totalRemoved}`);
    console.log("\nüí° Pr√≥ximos passos:");
    console.log("   1. A p√°gina ser√° recarregada automaticamente");
    console.log("   2. Voc√™ poder√° criar novas pr√©-matr√≠culas do zero");
    console.log("   3. Dados do servidor permaneceram intactos");
    console.log("   4. Na pr√≥xima conex√£o, dados do servidor ser√£o baixados novamente");

    // 5. Recarregar p√°gina ap√≥s 3 segundos
    setTimeout(() => {
      console.log("\nüîÑ Recarregando p√°gina...");
      window.location.reload();
    }, 3000);

    return true;
  } catch (error) {
    console.error("‚ùå Erro ao resetar banco de dados:", error);
    alert("Erro ao resetar banco de dados. Veja o console para mais detalhes.");
    return false;
  }
}

/**
 * Remove apenas dados N√ÉO sincronizados (pending)
 * Mant√©m dados j√° sincronizados
 */
export async function clearPendingOnly() {
  const confirmation = confirm(
    "Remover apenas dados N√ÉO sincronizados?\n\n" +
    "Isso ir√°:\n" +
    "- Remover dados com sync_status = 'pending'\n" +
    "- Manter dados j√° sincronizados (sync_status = 'synced')\n" +
    "- Limpar fila de sincroniza√ß√£o\n\n" +
    "Continuar?"
  );

  if (!confirmation) {
    console.log("‚ùå Opera√ß√£o cancelada");
    return false;
  }

  try {
    console.log("üßπ Limpando apenas dados pendentes...");

    // Contar antes
    const pendingCounts = {
      responsaveis: await db.responsaveis.where("sync_status").equals("pending").count(),
      alunos: await db.alunos.where("sync_status").equals("pending").count(),
      matriculas: await db.matriculas.where("sync_status").equals("pending").count(),
      documentos: await db.documentos.where("sync_status").equals("pending").count(),
      pendencias: await db.pendencias.where("sync_status").equals("pending").count(),
    };

    console.log("üìä Registros pendentes:");
    Object.entries(pendingCounts).forEach(([table, count]) => {
      if (count > 0) {
        console.log(`   ${table}: ${count}`);
      }
    });

    // Remover
    await db.syncQueue.clear();
    await db.responsaveis.where("sync_status").equals("pending").delete();
    await db.alunos.where("sync_status").equals("pending").delete();
    await db.matriculas.where("sync_status").equals("pending").delete();
    await db.documentos.where("sync_status").equals("pending").delete();
    await db.pendencias.where("sync_status").equals("pending").delete();

    const total = Object.values(pendingCounts).reduce((sum, count) => sum + count, 0);
    console.log(`‚úÖ ${total} registros pendentes removidos`);

    setTimeout(() => {
      window.location.reload();
    }, 2000);

    return true;
  } catch (error) {
    console.error("‚ùå Erro:", error);
    return false;
  }
}

// Disponibilizar globalmente
if (typeof window !== "undefined") {
  (window as any).resetDatabase = resetDatabase;
  (window as any).clearPendingOnly = clearPendingOnly;
  console.log("üõ†Ô∏è Fun√ß√µes dispon√≠veis no console:");
  console.log("   - resetDatabase() - Apaga TUDO e come√ßa do zero");
  console.log("   - clearPendingOnly() - Remove apenas dados n√£o sincronizados");
}

