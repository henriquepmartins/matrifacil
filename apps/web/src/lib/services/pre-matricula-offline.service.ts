import { db } from "../db";
import { ProtocoloGenerator } from "@/lib/utils/protocol-generator";

export interface PreMatriculaData {
  aluno: {
    nome: string;
    dataNascimento: string;
    etapa: string;
    necessidadesEspeciais: boolean;
    observacoes?: string;
  };
  responsavel: {
    nome: string;
    cpf: string;
    telefone: string;
    endereco: string;
    bairro: string;
    email?: string;
    parentesco: string;
    autorizadoRetirada: boolean;
  };
  observacoes?: string;
}

/**
 * Salva uma pr√©-matr√≠cula localmente no IndexedDB quando offline
 */
export async function savePreMatriculaOffline(data: PreMatriculaData) {
  // Gerar IDs locais √∫nicos
  const alunoId = crypto.randomUUID();
  const responsavelId = crypto.randomUUID();
  const matriculaId = crypto.randomUUID();

  const now = new Date();
  const protocoloLocal = ProtocoloGenerator.generate(data.aluno.etapa);

  console.log("üíæ Salvando pr√©-matr√≠cula offline...", {
    alunoId,
    responsavelId,
    matriculaId,
    protocoloLocal,
  });

  try {
    console.log("üíæ Iniciando salvamento no IndexedDB...");

    // Salvar no IndexedDB em uma transa√ß√£o at√¥mica
    await db.transaction(
      "rw",
      [db.alunos, db.responsaveis, db.matriculas],
      async () => {
        console.log("üìù Transa√ß√£o iniciada...");

        // Salvar aluno
        console.log("üìù Salvando aluno...");
        await db.alunos.add({
          id: alunoId,
          nome: data.aluno.nome,
          dataNascimento: new Date(data.aluno.dataNascimento),
          etapa: data.aluno.etapa as any,
          status: "pre",
          necessidadesEspeciais: data.aluno.necessidadesEspeciais,
          observacoes: data.aluno.observacoes,
          sync_status: "pending",
          createdAt: now,
          updatedAt: now,
        });

        console.log("‚úÖ Aluno salvo localmente:", alunoId);

        // Salvar respons√°vel
        console.log("üìù Salvando respons√°vel...");
        await db.responsaveis.add({
          id: responsavelId,
          nome: data.responsavel.nome,
          cpf: data.responsavel.cpf,
          telefone: data.responsavel.telefone,
          endereco: data.responsavel.endereco,
          bairro: data.responsavel.bairro,
          email: data.responsavel.email,
          parentesco: data.responsavel.parentesco,
          autorizadoRetirada: data.responsavel.autorizadoRetirada,
          sync_status: "pending",
          createdAt: now,
          updatedAt: now,
        });

        console.log("‚úÖ Respons√°vel salvo localmente:", responsavelId);

        // Salvar matr√≠cula (pr√©-matr√≠cula)
        console.log("üìù Salvando matr√≠cula...");
        await db.matriculas.add({
          id: matriculaId,
          protocoloLocal,
          alunoId,
          responsavelId,
          turmaId: undefined,
          status: "pre",
          observacoes: data.observacoes,
          sync_status: "pending",
          createdAt: now,
          updatedAt: now,
        });

        console.log("‚úÖ Matr√≠cula salva localmente:", matriculaId);
      }
    );

    console.log("üéâ Transa√ß√£o IndexedDB conclu√≠da com sucesso!");
  } catch (error: any) {
    console.error("‚ùå ERRO CR√çTICO ao salvar no IndexedDB:", error);
    console.error("üìã Detalhes do erro:", {
      message: error?.message,
      stack: error?.stack,
      name: error?.name,
      code: (error as any)?.code,
    });

    // Re-throw com mensagem mais clara
    throw new Error(
      `Falha ao salvar dados localmente: ${
        error?.message || "Erro desconhecido"
      }. Por favor, verifique o console para mais detalhes.`
    );
  }

  console.log("üéâ Pr√©-matr√≠cula salva offline com sucesso!");

  // Retornar os dados completos da pr√©-matr√≠cula criada para atualiza√ß√£o imediata do cache
  const preMatriculaCriada = {
    id: matriculaId,
    protocoloLocal,
    status: "pre" as const,
    observacoes: data.observacoes,
    createdAt: now,
    updatedAt: now,
    sync_status: "pending" as const,
    aluno: {
      id: alunoId,
      nome: data.aluno.nome,
      dataNascimento: data.aluno.dataNascimento,
      etapa: data.aluno.etapa,
      necessidadesEspeciais: data.aluno.necessidadesEspeciais,
      observacoes: data.aluno.observacoes,
    },
    responsavel: {
      id: responsavelId,
      nome: data.responsavel.nome,
      cpf: data.responsavel.cpf,
      telefone: data.responsavel.telefone,
      endereco: data.responsavel.endereco,
      bairro: data.responsavel.bairro,
      email: data.responsavel.email,
      parentesco: data.responsavel.parentesco,
      autorizadoRetirada: data.responsavel.autorizadoRetirada,
    },
  };

  return {
    matriculaId,
    protocoloLocal,
    alunoId,
    responsavelId,
    preMatriculaCriada,
  };
}

/**
 * Lista todas as pr√©-matr√≠culas pendentes de sincroniza√ß√£o
 */
export async function getPreMatriculasPendentes() {
  try {
    const matriculasPendentes = await db.matriculas
      .where("sync_status")
      .equals("pending")
      .toArray();

    console.log(
      `üìã Encontradas ${matriculasPendentes.length} pr√©-matr√≠culas pendentes`
    );

    return matriculasPendentes;
  } catch (error: any) {
    console.error("‚ùå Erro ao listar pr√©-matr√≠culas pendentes:", error);
    throw new Error(
      `Falha ao listar pr√©-matr√≠culas pendentes: ${
        error?.message || "Erro desconhecido"
      }`
    );
  }
}

/**
 * Deleta uma pr√©-matr√≠cula localmente (antes de ser sincronizada)
 */
export async function deletePreMatriculaLocal(
  matriculaId: string
): Promise<void> {
  try {
    // Buscar a matr√≠cula
    const matricula = await db.matriculas.get(matriculaId);

    if (!matricula) {
      throw new Error("Pr√©-matr√≠cula n√£o encontrada");
    }

    // Se j√° foi sincronizada, n√£o permite deletar
    if (matricula.sync_status === "synced") {
      throw new Error(
        "N√£o √© poss√≠vel deletar uma pr√©-matr√≠cula que j√° foi sincronizada"
      );
    }

    // Deletar em transa√ß√£o at√¥mica
    await db.transaction(
      "rw",
      [db.alunos, db.responsaveis, db.matriculas],
      async () => {
        // Buscar aluno e respons√°vel relacionados
        const aluno = await db.alunos.get(matricula.alunoId);
        const responsavel = await db.responsaveis.get(matricula.responsavelId);

        // Deletar matr√≠cula
        await db.matriculas.delete(matriculaId);

        // Deletar aluno se existir e n√£o tiver sido sincronizado
        if (aluno && aluno.sync_status === "pending") {
          await db.alunos.delete(aluno.id);
        }

        // Deletar respons√°vel se existir e n√£o tiver sido sincronizado
        if (responsavel && responsavel.sync_status === "pending") {
          await db.responsaveis.delete(responsavel.id);
        }
      }
    );

    console.log(`üóëÔ∏è Pr√©-matr√≠cula ${matriculaId} deletada com sucesso`);
  } catch (error: any) {
    console.error("‚ùå Erro ao deletar pr√©-matr√≠cula local:", error);
    throw new Error(
      `Falha ao deletar pr√©-matr√≠cula: ${error?.message || "Erro desconhecido"}`
    );
  }
}

/**
 * Valida se um CPF j√° existe no IndexedDB
 */
export async function checkCPFExists(cpf: string): Promise<boolean> {
  try {
    const cpfFormatted = cpf.replace(/\D/g, ""); // Remove caracteres n√£o num√©ricos
    const existing = await db.responsaveis
      .where("cpf")
      .equals(cpfFormatted)
      .first();

    return !!existing;
  } catch (error: any) {
    console.error("‚ùå Erro ao verificar CPF:", error);
    return false;
  }
}

/**
 * Obt√©m estat√≠sticas de pr√©-matr√≠culas offline
 */
export async function getPreMatriculasStats() {
  try {
    const total = await db.matriculas.count();
    const pendentes = await db.matriculas
      .where("sync_status")
      .equals("pending")
      .count();
    const sincronizadas = await db.matriculas
      .where("sync_status")
      .equals("synced")
      .count();

    return {
      total,
      pendentes,
      sincronizadas,
      conflicts: total - pendentes - sincronizadas,
    };
  } catch (error: any) {
    console.error("‚ùå Erro ao obter estat√≠sticas:", error);
    return {
      total: 0,
      pendentes: 0,
      sincronizadas: 0,
      conflicts: 0,
    };
  }
}
